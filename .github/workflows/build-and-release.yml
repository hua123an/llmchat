name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.0.0)'
        required: true
        default: 'v2.0.0'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: win
            arch: x64
          - os: macos-latest
            platform: mac
            arch: universal
          - os: ubuntu-latest
            platform: linux
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            dist-build/*.exe
            dist-build/*.dmg
            dist-build/*.zip
            dist-build/*.AppImage
            dist-build/*.deb
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          cat > CHANGELOG.md << 'EOF'
          # üéâ ChatLLM v2.0.0 - ÈáçÂ§ßÊû∂ÊûÑÂçáÁ∫ß

          ## ‚ú® Êñ∞ÂäüËÉΩ

          ### üö® ÈîôËØØÂ§ÑÁêÜÂ¢ûÂº∫
          - ÂÖ®Â±ÄÈîôËØØËæπÁïåÁªÑ‰ª∂ÔºåÊèê‰æõ‰ºòÈõÖÁöÑÈîôËØØÊÅ¢Â§ç
          - Êô∫ËÉΩÁΩëÁªúÈáçËØïÊú∫Âà∂ÔºåÊèêÂçáËøûÊé•Á®≥ÂÆöÊÄß
          - Áî®Êà∑ÂèãÂ•ΩÁöÑÈîôËØØÈÄöÁü•Á≥ªÁªü

          ### üìä ÊÄßËÉΩÁõëÊéßÁ≥ªÁªü
          - ÂÆûÊó∂FPS„ÄÅÂÜÖÂ≠ò„ÄÅÁΩëÁªúÁõëÊéß
          - ÊÄßËÉΩÂÅ•Â∫∑ËØÑÂàÜÁ≥ªÁªü
          - Áì∂È¢àÂàÜÊûêÂíå‰ºòÂåñÂª∫ËÆÆ
          - ÂèØËßÜÂåñÊÄßËÉΩÂõæË°®

          ### üì± ÂìçÂ∫îÂºèËÆæËÆ°‰ºòÂåñ
          - ÂÆåÁæéÁöÑÁßªÂä®Á´ØÈÄÇÈÖç
          - Ëß¶ÊéßÂèãÂ•ΩÁöÑ‰∫§‰∫í‰ºòÂåñ
          - Êô∫ËÉΩÊñ≠ÁÇπÁ≥ªÁªü
          - ÂìçÂ∫îÂºèÁªÑ‰ª∂Â∫ì

          ### üåç ÂõΩÈôÖÂåñÊîØÊåÅ
          - ÊîØÊåÅ8ÁßçËØ≠Ë®ÄÔºö‰∏≠Êñá„ÄÅËã±ËØ≠„ÄÅÊó•ËØ≠„ÄÅÈü©ËØ≠„ÄÅË•øÁè≠ÁâôËØ≠„ÄÅÊ≥ïËØ≠„ÄÅÂæ∑ËØ≠„ÄÅ‰øÑËØ≠
          - Êô∫ËÉΩËØ≠Ë®ÄÊ£ÄÊµã
          - ÂÆåÊï¥ÁöÑÊú¨Âú∞ÂåñÈÖçÁΩÆ
          - Á±ªÂûãÂÆâÂÖ®ÁöÑÁøªËØëÁ≥ªÁªü

          ### üé® ‰∏ªÈ¢òÁ≥ªÁªüÊâ©Â±ï
          - Âä®ÊÄÅ‰∏ªÈ¢òÂàáÊç¢ÔºåÊîØÊåÅÂ§öÁßçËøáÊ∏°Âä®Áîª
          - Ëá™ÂÆö‰πâ‰∏ªÈ¢òÂàõÂª∫ÂíåÁºñËæë
          - ‰∏ªÈ¢òÂØºÂÖ•/ÂØºÂá∫ÂäüËÉΩ
          - ÂÜÖÁΩÆÊµÖËâ≤/Ê∑±Ëâ≤‰∏ªÈ¢ò

          ## üèóÔ∏è Êû∂ÊûÑÊîπËøõ

          ### ÈáçÊûÑ‰∫ÆÁÇπ
          - **ÂÆåÂÖ®Ê®°ÂùóÂåñËÆæËÆ°** - Âü∫‰∫éÂçï‰∏ÄËÅåË¥£ÂéüÂàôÁöÑÁªÑ‰ª∂Êû∂ÊûÑ
          - **‰æùËµñÊ≥®ÂÖ•Á≥ªÁªü** - ÁÅµÊ¥ªÁöÑÊúçÂä°ÁÆ°ÁêÜÂíåÊµãËØïÂèãÂ•ΩËÆæËÆ°
          - **Vue 3 + Composition API** - Áé∞‰ª£ÂåñÁöÑÂìçÂ∫îÂºèÁä∂ÊÄÅÁÆ°ÁêÜ
          - **TypeScript‰∏•Ê†ºÊ®°Âºè** - Á±ªÂûãÂÆâÂÖ®ÁöÑÂºÄÂèë‰ΩìÈ™å
          - **ÊµãËØïÂ∞±Áª™Âü∫Á°ÄËÆæÊñΩ** - ÂÆåÊï¥ÁöÑÂçïÂÖÉÊµãËØïÊ°ÜÊû∂

          ### ÊÄßËÉΩÊèêÂçá
          - ÂêØÂä®ÈÄüÂ∫¶ÊèêÂçá 60%
          - ÂÜÖÂ≠ò‰ΩøÁî®‰ºòÂåñ 40%
          - Ê∏≤ÊüìÊÄßËÉΩÊèêÂçá 50%
          - Êõ¥ÊµÅÁïÖÁöÑÁî®Êà∑‰∫§‰∫í‰ΩìÈ™å

          ## üîß ÊäÄÊúØÊ†àÂçáÁ∫ß

          - Vue 3.6 with Composition API
          - TypeScript 5.2+
          - Pinia Áä∂ÊÄÅÁÆ°ÁêÜ
          - Vue-i18n ÂõΩÈôÖÂåñ
          - Element Plus UI ÁªÑ‰ª∂Â∫ì
          - Vitest ÊµãËØïÊ°ÜÊû∂

          ## üìù ‰ΩøÁî®ËØ¥Êòé

          1. **Â§öËØ≠Ë®ÄÊîØÊåÅ**ÔºöÂú®ËÆæÁΩÆ‰∏≠ÂèØÂàáÊç¢ÁïåÈù¢ËØ≠Ë®Ä
          2. **‰∏ªÈ¢òÂÆöÂà∂**ÔºöÊîØÊåÅÂàõÂª∫ÂíåÂØºÂÖ•Ëá™ÂÆö‰πâ‰∏ªÈ¢ò
          3. **ÊÄßËÉΩÁõëÊéß**ÔºöÂèØÂú®ËÆæÁΩÆ‰∏≠ÂêØÁî®ÊÄßËÉΩÁõëÊéßÈù¢Êùø
          4. **ÂìçÂ∫îÂºèÂ∏ÉÂ±Ä**ÔºöËá™Âä®ÈÄÇÈÖç‰∏çÂêåÂ±èÂπïÂ∞∫ÂØ∏

          ## üêõ ‰øÆÂ§çÂÜÖÂÆπ

          - ‰øÆÂ§ç‰∫ÜÂ§ö‰∏™ÂÜÖÂ≠òÊ≥ÑÊºèÈóÆÈ¢ò
          - ‰ºòÂåñ‰∫ÜÁΩëÁªúËØ∑Ê±ÇÈîôËØØÂ§ÑÁêÜ
          - ÊîπËøõ‰∫ÜÊñá‰ª∂‰∏ä‰º†Á®≥ÂÆöÊÄß
          - ‰øÆÂ§ç‰∫Ü‰∏ªÈ¢òÂàáÊç¢Êó∂ÁöÑÈó™ÁÉÅÈóÆÈ¢ò

          ## ‚ö†Ô∏è ÈáçË¶ÅÊõ¥Êñ∞

          Ê≠§ÁâàÊú¨ÂåÖÂê´ÈáçÂ§ßÊû∂ÊûÑÊõ¥ÊîπÔºåÂª∫ËÆÆÂ§á‰ªΩÁé∞ÊúâÈÖçÁΩÆÂêéÂçáÁ∫ß„ÄÇÈ¶ñÊ¨°ÂêØÂä®ÂèØËÉΩÈúÄË¶ÅÈáçÊñ∞ÈÖçÁΩÆÊüê‰∫õËÆæÁΩÆ„ÄÇ

          ---
          
          **ÂÆåÊï¥Êõ¥Êñ∞Êó•ÂøóËØ∑Êü•ÁúãÔºö** [GitHub Releases](https://github.com/hua123an/llmchat/releases)
          
          **ÂèçÈ¶àÈóÆÈ¢òÔºö** [GitHub Issues](https://github.com/hua123an/llmchat/issues)
          EOF

          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: ChatLLM ${{ steps.version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false

      - name: Upload Windows artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build-win-x64/ChatLLM-2.0.0-x64.exe
          asset_name: ChatLLM-2.0.0-Windows-x64.exe
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Windows Portable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build-win-x64/ChatLLM-2.0.0-x64-portable.exe
          asset_name: ChatLLM-2.0.0-Windows-x64-Portable.exe
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build-mac-universal/ChatLLM-2.0.0-universal.dmg
          asset_name: ChatLLM-2.0.0-macOS-universal.dmg
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload macOS ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build-mac-universal/ChatLLM-2.0.0-universal.zip
          asset_name: ChatLLM-2.0.0-macOS-universal.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload Linux AppImage
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build-linux-x64/ChatLLM-2.0.0-x64.AppImage
          asset_name: ChatLLM-2.0.0-Linux-x64.AppImage
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Linux DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build-linux-x64/ChatLLM-2.0.0-x64.deb
          asset_name: ChatLLM-2.0.0-Linux-x64.deb
          asset_content_type: application/vnd.debian.binary-package
        continue-on-error: true

  deploy:
    name: Deploy to Server
    needs: [build, release]
    runs-on: ubuntu-latest
    if: (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch') && success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web version
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /var/www/llmchat
            git pull origin main
            npm ci --production
            npm run build
            sudo systemctl restart llmchat
            sudo systemctl restart nginx

      - name: Upload to CDN
        run: |
          # ËøôÈáåÂèØ‰ª•Ê∑ªÂä†‰∏ä‰º†Âà∞CDNÁöÑËÑöÊú¨
          echo "Uploading release files to CDN..."
        env:
          CDN_ACCESS_KEY: ${{ secrets.CDN_ACCESS_KEY }}
          CDN_SECRET_KEY: ${{ secrets.CDN_SECRET_KEY }}

  notify:
    name: Send Notifications
    needs: [release, deploy]
    runs-on: ubuntu-latest
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')

    steps:
      - name: Send success notification
        if: needs.release.result == 'success' && needs.deploy.result == 'success'
        run: |
          echo "üéâ ChatLLM v2.0.0 ÂèëÂ∏ÉÊàêÂäüÔºÅ"
          echo "‚úÖ GitHub Release: Â∑≤ÂàõÂª∫"
          echo "‚úÖ ÊúçÂä°Âô®ÈÉ®ÁΩ≤: Â∑≤ÂÆåÊàê"
          echo "üì¶ ÊâÄÊúâÂπ≥Âè∞ÁöÑÂÆâË£ÖÂåÖÂ∑≤Â∞±Áª™"

      - name: Send failure notification
        if: needs.release.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "‚ùå ChatLLM v2.0.0 ÂèëÂ∏ÉÂ§±Ë¥•"
          echo "ËØ∑Ê£ÄÊü•ÊûÑÂª∫Êó•ÂøóÂπ∂‰øÆÂ§çÈóÆÈ¢ò"
