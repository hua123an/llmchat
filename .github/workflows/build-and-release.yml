name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.0.0)'
        required: true
        default: 'v2.0.0'

jobs:
  build:
    name: Build for windows-latest
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Build Electron app (Windows)
        run: npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-win-x64
          path: |
            dist-build/*.exe
            dist-build/*.yml
            dist-build/*.blockmap
            dist-build/*.dmg
            dist-build/*.zip
            dist-build/*.AppImage
            dist-build/*.deb
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-win-x64
          path: dist-build

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog (from tag if available)
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            awk 'BEGIN{p=0} /^## \[?2\.0\.2\]?/{p=1} /^## \[?[0-9]/{if(p){exit}} p{print} END{if(!p) print "ChatLLM Release"}' CHANGELOG.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "ChatLLM Release" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: ChatLLM ${{ steps.version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false

      - name: Upload Windows installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist-build/ChatLLM-*x64.exe
          asset_name: ChatLLM-${{ steps.version.outputs.VERSION }}-Windows-x64.exe
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload Windows Portable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist-build/ChatLLM-*x64-portable.exe
          asset_name: ChatLLM-${{ steps.version.outputs.VERSION }}-Windows-x64-Portable.exe
          asset_content_type: application/octet-stream
        continue-on-error: true

      - name: Upload latest.yml
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist-build/latest.yml
          asset_name: latest.yml
          asset_content_type: text/yaml
        continue-on-error: true

      - name: Upload blockmap
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist-build/*.blockmap
          asset_name: ChatLLM-${{ steps.version.outputs.VERSION }}-Windows-x64.exe.blockmap
          asset_content_type: application/octet-stream
        continue-on-error: true

  notify:
    name: Send Notifications
    needs: [release]
    runs-on: ubuntu-latest
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')

    steps:
      - name: Send success notification
        if: needs.release.result == 'success'
        run: |
          echo "üéâ ChatLLM release succeeded!"
      
      - name: Send failure notification
        if: needs.release.result == 'failure'
        run: |
          echo "‚ùå ChatLLM release failed"
