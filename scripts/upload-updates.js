#!/usr/bin/env node
/*
 Ëá™Âä®‰∏ä‰º†ÊûÑÂª∫‰∫ßÁâ©Âà∞Êõ¥Êñ∞ÊúçÂä°Âô®Ôºàgeneric providerÔºâ
 - ÈªòËÆ§‰ΩøÁî® SFTPÔºàssh2-sftp-clientÔºâ
 - ËØªÂèñ‰ºòÂÖàÁ∫ßÔºöÁéØÂ¢ÉÂèòÈáè > release.config.json
 - ‰∏ä‰º† dist-app ‰∏ãÁöÑ latest.yml„ÄÅ*.exe„ÄÅ*.blockmap„ÄÅ*.zip„ÄÅ*.dmg„ÄÅ*.AppImage„ÄÅ*.deb
 */

const fs = require('node:fs');
const path = require('node:path');
const SftpClient = require('ssh2-sftp-client');

function readJSON(file) {
  try {
    return JSON.parse(fs.readFileSync(file, 'utf-8'));
  } catch {
    return null;
  }
}

function resolveConfig() {
  const root = process.cwd();
  const cfg = readJSON(path.join(root, 'release.config.json')) || {};
  const env = process.env;
  const conf = {
    protocol: env.RELEASE_PROTOCOL || cfg.protocol || 'sftp',
    host: env.RELEASE_HOST || cfg.host || '',
    port: Number(env.RELEASE_PORT || cfg.port || 22),
    username: env.RELEASE_USERNAME || cfg.username || '',
    password: env.RELEASE_PASSWORD || cfg.password || '',
    privateKeyPath: env.RELEASE_PRIVATE_KEY || cfg.privateKeyPath || '',
    remoteDir: env.RELEASE_REMOTE_DIR || cfg.remoteDir || '',
    cleanRemoteBeforeUpload: (env.RELEASE_CLEAN || cfg.cleanRemoteBeforeUpload) || false,
  };
  if (!conf.host || !conf.username || !conf.remoteDir) {
    throw new Error('ÂèëÂ∏ÉÈÖçÁΩÆ‰∏çÂÆåÊï¥ÔºöÈúÄË¶Å host/username/remoteDir„ÄÇËØ∑Âú® release.config.json ÊàñÁéØÂ¢ÉÂèòÈáè‰∏≠Â°´ÂÜô„ÄÇ');
  }
  return conf;
}

function collectArtifacts() {
  const root = process.cwd();
  const outDir = path.join(root, 'dist-app');
  if (!fs.existsSync(outDir)) {
    throw new Error('Êú™ÊâæÂà∞ dist-appÔºåËØ∑ÂÖàÊâßË°å npm run build:app');
  }
  const includes = [/latest\.yml$/i, /\.exe$/i, /\.blockmap$/i, /\.zip$/i, /\.dmg$/i, /\.AppImage$/i, /\.deb$/i];
  const files = fs.readdirSync(outDir)
    .filter((f) => fs.statSync(path.join(outDir, f)).isFile())
    .filter((f) => includes.some((re) => re.test(f)))
    .map((f) => path.join(outDir, f));
  if (files.length === 0) throw new Error('dist-app ‰∏≠Ê≤°ÊúâÂèØ‰∏ä‰º†ÁöÑÊûÑÂª∫‰∫ßÁâ©„ÄÇ');
  return { outDir, files };
}

async function ensureDir(sftp, remoteDir) {
  const parts = remoteDir.replace(/\\/g, '/').split('/').filter(Boolean);
  let cur = remoteDir.startsWith('/') ? '/' : '';
  for (const p of parts) {
    cur += (cur.endsWith('/') ? '' : '/') + p;
    try {
      const exists = await sftp.exists(cur);
      if (!exists) await sftp.mkdir(cur);
    } catch (e) {
      // ÁõÆÂΩïÂèØËÉΩÂ∑≤Â≠òÂú®
    }
  }
}

async function cleanRemote(sftp, remoteDir) {
  try {
    const list = await sftp.list(remoteDir);
    for (const item of list) {
      const remotePath = path.posix.join(remoteDir, item.name);
      if (item.type === '-') {
        await sftp.delete(remotePath);
      }
    }
  } catch (e) {
    console.warn('Ê∏ÖÁêÜËøúÁ´ØÁõÆÂΩïÂ§±Ë¥•ÔºàÂøΩÁï•ÔºâÔºö', e.message || e);
  }
}

async function upload() {
  const cfg = resolveConfig();
  const { files } = collectArtifacts();
  if (cfg.protocol !== 'sftp') {
    throw new Error(`ÊöÇ‰ªÖÊîØÊåÅ protocol=sftpÔºåÂΩìÂâç‰∏∫ ${cfg.protocol}`);
  }

  const sftp = new SftpClient();
  const connectOptions = {
    host: cfg.host,
    port: cfg.port,
    username: cfg.username,
  };
  if (cfg.privateKeyPath) {
    connectOptions.privateKey = fs.readFileSync(cfg.privateKeyPath);
    if (cfg.password) connectOptions.passphrase = cfg.password; // ÁßÅÈí•Áü≠ËØ≠
  } else if (cfg.password) {
    connectOptions.password = cfg.password;
  }

  console.log(`üöÄ Ê≠£Âú®ËøûÊé• ${cfg.username}@${cfg.host}:${cfg.port} ...`);
  await sftp.connect(connectOptions);
  try {
    await ensureDir(sftp, cfg.remoteDir);
    if (cfg.cleanRemoteBeforeUpload) {
      console.log('üßπ Ê∏ÖÁêÜËøúÁ´ØÊóßÊñá‰ª∂...');
      await cleanRemote(sftp, cfg.remoteDir);
    }
    console.log('‚¨ÜÔ∏è ÂºÄÂßã‰∏ä‰º†ÊûÑÂª∫‰∫ßÁâ©Âà∞', cfg.remoteDir);
    for (const file of files) {
      const remote = path.posix.join(cfg.remoteDir.replace(/\\/g, '/'), path.basename(file));
      console.log(`  ‚Üí ${path.basename(file)}`);
      await sftp.fastPut(file, remote);
    }
    console.log('\n‚úÖ ‰∏ä‰º†ÂÆåÊàêÔºåÂÖ±‰∏ä‰º†', files.length, '‰∏™Êñá‰ª∂');
  } finally {
    await sftp.end().catch(() => {});
  }
}

upload().catch((e) => {
  console.error('‚ùå ‰∏ä‰º†Â§±Ë¥•Ôºö', e.message || e);
  process.exit(1);
});


